{"ast":null,"code":"// import {\n//   Box,\n//   Button,\n//   Card,\n//   CardHeader,\n//   IconButton,\n//   Modal,\n//   Paper,\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableContainer,\n//   TableHead,\n//   TableRow,\n// } from \"@mui/material\";\n// import React, { useEffect, useState } from \"react\";\n// import CreateIcon from \"@mui/icons-material/Create\";\n// import DeleteIcon from \"@mui/icons-material/Delete\";\n// import EditIcon from \"@mui/icons-material/Edit\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import CreateCategoryParent from \"./CreateCategoryParent\";\n// import { deleteCategory, getCategory, getCategory1 } from \"../../componet/State/CategoryTest/Action\";\n\n// const style = {\n//   position: \"absolute\",\n//   top: \"50%\",\n//   left: \"50%\",\n//   transform: \"translate(-50%, -50%)\",\n//   width: 400,\n//   bgcolor: \"background.paper\",\n//   border: \"2px solid #000\",\n//   boxShadow: 24,\n//   p: 4,\n// };\n\n// export default function CategoryParentTable() {\n//   const [open, setOpen] = useState(false);\n//   const [selectedCategory, setSelectedCategory] = useState(null); // Dùng để lưu danh mục khi sửa\n//   const [currentPage, setCurrentPage] = useState(0); // Trang hiện tại\n//   const [pageSize] = useState(10); // Số mục trên mỗi trang\n//   const [totalPages, setTotalPages] = useState(0); // Tổng số trang\n\n//   const dispatch = useDispatch();\n//   const { restaurant, category } = useSelector((store) => store);\n//   const jwt = localStorage.getItem(\"jwt\");\n\n//   // Gọi API lấy danh mục khi component mount hoặc khi phân trang thay đổi\n//   useEffect(() => {\n//     if (restaurant?.usersRestaurant?.id) {\n//       dispatch(\n//         getCategory1({\n//           id: restaurant.usersRestaurant.id,\n//           jwt,\n//           page: currentPage,\n//           size: pageSize,\n//         })\n//       ).then((response) => {\n//         setTotalPages(response.payload?.totalPages || 0); // Cập nhật tổng số trang\n//       });\n//     }\n//   }, [dispatch, restaurant?.usersRestaurant?.id, jwt, currentPage, pageSize]);\n\n//   // Mở Modal\n//   const handleOpen = () => {\n//     setSelectedCategory(null); // Reset dữ liệu sửa\n//     setOpen(true);\n//   };\n\n//   // Đóng Modal\n//   const handleClose = () => {\n//     setOpen(false);\n//     setSelectedCategory(null);\n//   };\n\n//   // Chỉnh sửa danh mục\n//   const handleEdit = (category) => {\n//     setSelectedCategory(category); // Lưu thông tin danh mục vào state\n//     setOpen(true); // Mở modal\n//   };\n\n//   // Thay đổi trang\n//   const handlePageChange = (newPage) => {\n//     if (newPage >= 0 && newPage < totalPages) {\n//       setCurrentPage(newPage); // Cập nhật trang hiện tại\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <Box>\n//         <Card className=\"mt-1\">\n//           <CardHeader\n//             action={\n//               <IconButton onClick={handleOpen} aria-label=\"settings\">\n//                 <CreateIcon />\n//               </IconButton>\n//             }\n//             title={\"Danh mục\"}\n//             sx={{ pt: 2, alignItems: \"center\" }}\n//           />\n\n//           <TableContainer component={Paper}>\n//             <Table sx={{ minHeight: 650 }} aria-label=\"simple table\">\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell align=\"left\">ID</TableCell>\n//                   <TableCell align=\"left\">Tên</TableCell>\n//                   <TableCell align=\"center\">Hành động</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {category?.category?.length > 0 ? (\n//                   category.category.map((item) => (\n//                     <TableRow\n//                       key={item.id}\n//                       sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n//                     >\n//                       <TableCell component=\"th\" scope=\"row\">\n//                         {item.id}\n//                       </TableCell>\n//                       <TableCell align=\"left\">{item.name}</TableCell>\n//                       <TableCell align=\"center\">\n//                         {/* Nút Sửa */}\n//                         <IconButton\n//                           color=\"primary\"\n//                           onClick={() => handleEdit(item)}\n//                         >\n//                           <EditIcon />\n//                         </IconButton>\n//                         {/* Nút Xóa */}\n//                         <IconButton\n//                           color=\"error\"\n//                           onClick={() =>\n//                             dispatch(deleteCategory({ id: item.id, jwt }))\n//                           }\n//                         >\n//                           <DeleteIcon />\n//                         </IconButton>\n//                       </TableCell>\n//                     </TableRow>\n//                   ))\n//                 ) : (\n//                   <TableRow>\n//                     <TableCell colSpan={3} align=\"center\">\n//                       Không có danh mục nào\n//                     </TableCell>\n//                   </TableRow>\n//                 )}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         </Card>\n\n//         {/* Phân trang */}\n//         <Box display=\"flex\" justifyContent=\"center\" mt={2}>\n//           <Button\n//             disabled={currentPage === 0}\n//             onClick={() => handlePageChange(currentPage - 1)}\n//           >\n//             Trang trước\n//           </Button>\n//           <Box mx={2}>\n//             Trang {currentPage + 1} / {totalPages}\n//           </Box>\n//           <Button\n//             disabled={currentPage + 1 >= totalPages}\n//             onClick={() => handlePageChange(currentPage + 1)}\n//           >\n//             Trang sau\n//           </Button>\n//         </Box>\n\n//         {/* Modal Thêm/Sửa */}\n//         <Modal\n//           open={open}\n//           onClose={handleClose}\n//           aria-labelledby=\"modal-modal-title\"\n//           aria-describedby=\"modal-modal-description\"\n//         >\n//           <Box sx={style}>\n//             {/* Truyền selectedCategory nếu chỉnh sửa */}\n//             <CreateCategoryParent\n//               category={selectedCategory}\n//               onClose={handleClose}\n//             />\n//           </Box>\n//         </Modal>\n//       </Box>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/DUONG/Desktop/Study/React/frontend_webiot/frontend_iot/src/AdminComponent/CategoryTest/CategoryParentTable.jsx"],"sourcesContent":["// import {\r\n//   Box,\r\n//   Button,\r\n//   Card,\r\n//   CardHeader,\r\n//   IconButton,\r\n//   Modal,\r\n//   Paper,\r\n//   Table,\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableContainer,\r\n//   TableHead,\r\n//   TableRow,\r\n// } from \"@mui/material\";\r\n// import React, { useEffect, useState } from \"react\";\r\n// import CreateIcon from \"@mui/icons-material/Create\";\r\n// import DeleteIcon from \"@mui/icons-material/Delete\";\r\n// import EditIcon from \"@mui/icons-material/Edit\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import CreateCategoryParent from \"./CreateCategoryParent\";\r\n// import { deleteCategory, getCategory, getCategory1 } from \"../../componet/State/CategoryTest/Action\";\r\n\r\n// const style = {\r\n//   position: \"absolute\",\r\n//   top: \"50%\",\r\n//   left: \"50%\",\r\n//   transform: \"translate(-50%, -50%)\",\r\n//   width: 400,\r\n//   bgcolor: \"background.paper\",\r\n//   border: \"2px solid #000\",\r\n//   boxShadow: 24,\r\n//   p: 4,\r\n// };\r\n\r\n// export default function CategoryParentTable() {\r\n//   const [open, setOpen] = useState(false);\r\n//   const [selectedCategory, setSelectedCategory] = useState(null); // Dùng để lưu danh mục khi sửa\r\n//   const [currentPage, setCurrentPage] = useState(0); // Trang hiện tại\r\n//   const [pageSize] = useState(10); // Số mục trên mỗi trang\r\n//   const [totalPages, setTotalPages] = useState(0); // Tổng số trang\r\n\r\n//   const dispatch = useDispatch();\r\n//   const { restaurant, category } = useSelector((store) => store);\r\n//   const jwt = localStorage.getItem(\"jwt\");\r\n\r\n//   // Gọi API lấy danh mục khi component mount hoặc khi phân trang thay đổi\r\n//   useEffect(() => {\r\n//     if (restaurant?.usersRestaurant?.id) {\r\n//       dispatch(\r\n//         getCategory1({\r\n//           id: restaurant.usersRestaurant.id,\r\n//           jwt,\r\n//           page: currentPage,\r\n//           size: pageSize,\r\n//         })\r\n//       ).then((response) => {\r\n//         setTotalPages(response.payload?.totalPages || 0); // Cập nhật tổng số trang\r\n//       });\r\n//     }\r\n//   }, [dispatch, restaurant?.usersRestaurant?.id, jwt, currentPage, pageSize]);\r\n\r\n//   // Mở Modal\r\n//   const handleOpen = () => {\r\n//     setSelectedCategory(null); // Reset dữ liệu sửa\r\n//     setOpen(true);\r\n//   };\r\n\r\n//   // Đóng Modal\r\n//   const handleClose = () => {\r\n//     setOpen(false);\r\n//     setSelectedCategory(null);\r\n//   };\r\n\r\n//   // Chỉnh sửa danh mục\r\n//   const handleEdit = (category) => {\r\n//     setSelectedCategory(category); // Lưu thông tin danh mục vào state\r\n//     setOpen(true); // Mở modal\r\n//   };\r\n\r\n//   // Thay đổi trang\r\n//   const handlePageChange = (newPage) => {\r\n//     if (newPage >= 0 && newPage < totalPages) {\r\n//       setCurrentPage(newPage); // Cập nhật trang hiện tại\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <Box>\r\n//         <Card className=\"mt-1\">\r\n//           <CardHeader\r\n//             action={\r\n//               <IconButton onClick={handleOpen} aria-label=\"settings\">\r\n//                 <CreateIcon />\r\n//               </IconButton>\r\n//             }\r\n//             title={\"Danh mục\"}\r\n//             sx={{ pt: 2, alignItems: \"center\" }}\r\n//           />\r\n\r\n//           <TableContainer component={Paper}>\r\n//             <Table sx={{ minHeight: 650 }} aria-label=\"simple table\">\r\n//               <TableHead>\r\n//                 <TableRow>\r\n//                   <TableCell align=\"left\">ID</TableCell>\r\n//                   <TableCell align=\"left\">Tên</TableCell>\r\n//                   <TableCell align=\"center\">Hành động</TableCell>\r\n//                 </TableRow>\r\n//               </TableHead>\r\n//               <TableBody>\r\n//                 {category?.category?.length > 0 ? (\r\n//                   category.category.map((item) => (\r\n//                     <TableRow\r\n//                       key={item.id}\r\n//                       sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n//                     >\r\n//                       <TableCell component=\"th\" scope=\"row\">\r\n//                         {item.id}\r\n//                       </TableCell>\r\n//                       <TableCell align=\"left\">{item.name}</TableCell>\r\n//                       <TableCell align=\"center\">\r\n//                         {/* Nút Sửa */}\r\n//                         <IconButton\r\n//                           color=\"primary\"\r\n//                           onClick={() => handleEdit(item)}\r\n//                         >\r\n//                           <EditIcon />\r\n//                         </IconButton>\r\n//                         {/* Nút Xóa */}\r\n//                         <IconButton\r\n//                           color=\"error\"\r\n//                           onClick={() =>\r\n//                             dispatch(deleteCategory({ id: item.id, jwt }))\r\n//                           }\r\n//                         >\r\n//                           <DeleteIcon />\r\n//                         </IconButton>\r\n//                       </TableCell>\r\n//                     </TableRow>\r\n//                   ))\r\n//                 ) : (\r\n//                   <TableRow>\r\n//                     <TableCell colSpan={3} align=\"center\">\r\n//                       Không có danh mục nào\r\n//                     </TableCell>\r\n//                   </TableRow>\r\n//                 )}\r\n//               </TableBody>\r\n//             </Table>\r\n//           </TableContainer>\r\n//         </Card>\r\n\r\n//         {/* Phân trang */}\r\n//         <Box display=\"flex\" justifyContent=\"center\" mt={2}>\r\n//           <Button\r\n//             disabled={currentPage === 0}\r\n//             onClick={() => handlePageChange(currentPage - 1)}\r\n//           >\r\n//             Trang trước\r\n//           </Button>\r\n//           <Box mx={2}>\r\n//             Trang {currentPage + 1} / {totalPages}\r\n//           </Box>\r\n//           <Button\r\n//             disabled={currentPage + 1 >= totalPages}\r\n//             onClick={() => handlePageChange(currentPage + 1)}\r\n//           >\r\n//             Trang sau\r\n//           </Button>\r\n//         </Box>\r\n\r\n//         {/* Modal Thêm/Sửa */}\r\n//         <Modal\r\n//           open={open}\r\n//           onClose={handleClose}\r\n//           aria-labelledby=\"modal-modal-title\"\r\n//           aria-describedby=\"modal-modal-description\"\r\n//         >\r\n//           <Box sx={style}>\r\n//             {/* Truyền selectedCategory nếu chỉnh sửa */}\r\n//             <CreateCategoryParent\r\n//               category={selectedCategory}\r\n//               onClose={handleClose}\r\n//             />\r\n//           </Box>\r\n//         </Modal>\r\n//       </Box>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}