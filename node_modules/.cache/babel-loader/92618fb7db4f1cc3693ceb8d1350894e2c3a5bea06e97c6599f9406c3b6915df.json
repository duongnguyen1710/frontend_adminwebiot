{"ast":null,"code":"import { api } from \"../../config/api\";\nimport { CREATE_BLOG_FAILURE, CREATE_BLOG_REQUEST, CREATE_BLOG_SUCCESS, DELETE_BLOG_FAILURE, DELETE_BLOG_REQUEST, DELETE_BLOG_SUCCESS, GET_BLOG_FAILURE, GET_BLOG_REQUEST, GET_BLOG_SUCCESS, GETTOP3_BLOG_FAILURE, GETTOP3_BLOG_REQUEST, GETTOP3_BLOG_SUCCESS, UPDATE_BLOG_FAILURE, UPDATE_BLOG_REQUEST, UPDATE_BLOG_SUCCESS } from \"./ActionType\";\nconst getAuthHeader = () => {\n  const jwt = localStorage.getItem('jwt'); // Giáº£ sá»­ JWT Ä‘Æ°á»£c lÆ°u trong localStorage\n  return {\n    headers: {\n      Authorization: `Bearer ${jwt}`\n    }\n  };\n};\n\n/** ðŸ“Œ 1. Láº¥y Blog theo ID */\nexport const getBlogById = id => async dispatch => {\n  dispatch({\n    type: GET_BLOG_REQUEST\n  });\n  try {\n    const response = await api.get(`/api/admin/blog/${id}`, getAuthHeader());\n    dispatch({\n      type: GET_BLOG_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_BLOG_FAILURE,\n      payload: error.message\n    });\n  }\n};\n\n/** ðŸ“Œ 2. ThÃªm Blog má»›i */\nexport const createBlog = blogData => async dispatch => {\n  dispatch({\n    type: CREATE_BLOG_REQUEST\n  });\n  try {\n    const response = await api.post(`/api/admin/blog`, blogData, getAuthHeader());\n    dispatch({\n      type: CREATE_BLOG_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_BLOG_FAILURE,\n      payload: error.message\n    });\n  }\n};\n\n/** ðŸ“Œ 3. Cáº­p nháº­t Blog */\nexport const updateBlog = (id, blogData) => async dispatch => {\n  dispatch({\n    type: UPDATE_BLOG_REQUEST\n  });\n  try {\n    const response = await api.put(`/api/admin/blog/${id}`, blogData, getAuthHeader());\n    dispatch({\n      type: UPDATE_BLOG_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_BLOG_FAILURE,\n      payload: error.message\n    });\n  }\n};\n\n/** ðŸ“Œ 4. XÃ³a Blog */\nexport const deleteBlog = id => async dispatch => {\n  dispatch({\n    type: DELETE_BLOG_REQUEST\n  });\n  try {\n    await api.delete(`/api/admin/blog/${id}`, getAuthHeader());\n    dispatch({\n      type: DELETE_BLOG_SUCCESS,\n      payload: id\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_BLOG_FAILURE,\n      payload: error.message\n    });\n  }\n};\n\n/** ðŸ“Œ 5. PhÃ¢n trang Blog */\nexport const getBlogsPaginated = (page = 0, size = 5) => async dispatch => {\n  dispatch({\n    type: GET_BLOG_REQUEST\n  });\n  try {\n    const response = await api.get(`/api/admin/blog/page?page=${page}&size=${size}`, getAuthHeader());\n    dispatch({\n      type: GET_BLOG_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_BLOG_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const getTop3Blogs = () => async dispatch => {\n  dispatch({\n    type: GETTOP3_BLOG_REQUEST\n  });\n  try {\n    const response = await api.get('/blog/getTop3New');\n    dispatch({\n      type: GETTOP3_BLOG_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GETTOP3_BLOG_FAILURE,\n      payload: error.message\n    });\n  }\n};\n\n// Láº¥y danh sÃ¡ch blog\nexport const fetchBlogs = (page = 0, size = 5) => async dispatch => {\n  dispatch({\n    type: GET_BLOG_REQUEST\n  });\n  try {\n    const response = await api.get(`/api/admin/blog/page`, {\n      params: {\n        page,\n        size\n      },\n      ...getAuthHeader()\n    });\n    dispatch({\n      type: GET_BLOG_SUCCESS,\n      payload: response.data\n    });\n  } catch (error) {\n    var _error$response;\n    dispatch({\n      type: GET_BLOG_FAILURE,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || 'Something went wrong'\n    });\n  }\n};","map":{"version":3,"names":["api","CREATE_BLOG_FAILURE","CREATE_BLOG_REQUEST","CREATE_BLOG_SUCCESS","DELETE_BLOG_FAILURE","DELETE_BLOG_REQUEST","DELETE_BLOG_SUCCESS","GET_BLOG_FAILURE","GET_BLOG_REQUEST","GET_BLOG_SUCCESS","GETTOP3_BLOG_FAILURE","GETTOP3_BLOG_REQUEST","GETTOP3_BLOG_SUCCESS","UPDATE_BLOG_FAILURE","UPDATE_BLOG_REQUEST","UPDATE_BLOG_SUCCESS","getAuthHeader","jwt","localStorage","getItem","headers","Authorization","getBlogById","id","dispatch","type","response","get","payload","data","error","message","createBlog","blogData","post","updateBlog","put","deleteBlog","delete","getBlogsPaginated","page","size","getTop3Blogs","fetchBlogs","params","_error$response"],"sources":["C:/Users/DUONG/Desktop/Study/React/frontend_webiot/frontend_iot/src/componet/State/Blog/Action.js"],"sourcesContent":["import { api } from \"../../config/api\";\r\nimport { CREATE_BLOG_FAILURE, CREATE_BLOG_REQUEST, CREATE_BLOG_SUCCESS, DELETE_BLOG_FAILURE, DELETE_BLOG_REQUEST, DELETE_BLOG_SUCCESS, GET_BLOG_FAILURE, GET_BLOG_REQUEST, GET_BLOG_SUCCESS, GETTOP3_BLOG_FAILURE, GETTOP3_BLOG_REQUEST, GETTOP3_BLOG_SUCCESS, UPDATE_BLOG_FAILURE, UPDATE_BLOG_REQUEST, UPDATE_BLOG_SUCCESS } from \"./ActionType\";\r\n\r\nconst getAuthHeader = () => {\r\n    const jwt = localStorage.getItem('jwt'); // Giáº£ sá»­ JWT Ä‘Æ°á»£c lÆ°u trong localStorage\r\n    return {\r\n        headers: {\r\n            Authorization: `Bearer ${jwt}`,\r\n        },\r\n    };\r\n};\r\n\r\n/** ðŸ“Œ 1. Láº¥y Blog theo ID */\r\nexport const getBlogById = (id) => async (dispatch) => {\r\n    dispatch({ type: GET_BLOG_REQUEST });\r\n    try {\r\n        const response = await api.get(`/api/admin/blog/${id}`, getAuthHeader());\r\n        dispatch({ type: GET_BLOG_SUCCESS, payload: response.data });\r\n    } catch (error) {\r\n        dispatch({ type: GET_BLOG_FAILURE, payload: error.message });\r\n    }\r\n};\r\n\r\n/** ðŸ“Œ 2. ThÃªm Blog má»›i */\r\nexport const createBlog = (blogData) => async (dispatch) => {\r\n    dispatch({ type: CREATE_BLOG_REQUEST });\r\n    try {\r\n        const response = await api.post(`/api/admin/blog`, blogData, getAuthHeader());\r\n        dispatch({ type: CREATE_BLOG_SUCCESS, payload: response.data });\r\n    } catch (error) {\r\n        dispatch({ type: CREATE_BLOG_FAILURE, payload: error.message });\r\n    }\r\n};\r\n\r\n/** ðŸ“Œ 3. Cáº­p nháº­t Blog */\r\nexport const updateBlog = (id, blogData) => async (dispatch) => {\r\n    dispatch({ type: UPDATE_BLOG_REQUEST });\r\n    try {\r\n        const response = await api.put(`/api/admin/blog/${id}`, blogData, getAuthHeader());\r\n        dispatch({ type: UPDATE_BLOG_SUCCESS, payload: response.data });\r\n    } catch (error) {\r\n        dispatch({ type: UPDATE_BLOG_FAILURE, payload: error.message });\r\n    }\r\n};\r\n\r\n/** ðŸ“Œ 4. XÃ³a Blog */\r\nexport const deleteBlog = (id) => async (dispatch) => {\r\n    dispatch({ type: DELETE_BLOG_REQUEST });\r\n    try {\r\n        await api.delete(`/api/admin/blog/${id}`, getAuthHeader());\r\n        dispatch({ type: DELETE_BLOG_SUCCESS, payload: id });\r\n    } catch (error) {\r\n        dispatch({ type: DELETE_BLOG_FAILURE, payload: error.message });\r\n    }\r\n};\r\n\r\n/** ðŸ“Œ 5. PhÃ¢n trang Blog */\r\nexport const getBlogsPaginated = (page = 0, size = 5) => async (dispatch) => {\r\n    dispatch({ type: GET_BLOG_REQUEST });\r\n    try {\r\n        const response = await api.get(`/api/admin/blog/page?page=${page}&size=${size}`, getAuthHeader());\r\n        dispatch({ type: GET_BLOG_SUCCESS, payload: response.data });\r\n    } catch (error) {\r\n        dispatch({ type: GET_BLOG_FAILURE, payload: error.message });\r\n    }\r\n};\r\n\r\nexport const getTop3Blogs = () => async (dispatch) => {\r\n    dispatch({ type: GETTOP3_BLOG_REQUEST });\r\n    try {\r\n        const response = await api.get('/blog/getTop3New');\r\n        dispatch({ type: GETTOP3_BLOG_SUCCESS, payload: response.data });\r\n    } catch (error) {\r\n        dispatch({ type: GETTOP3_BLOG_FAILURE, payload: error.message });\r\n    }\r\n};\r\n\r\n// Láº¥y danh sÃ¡ch blog\r\nexport const fetchBlogs = (page = 0, size = 5) => async (dispatch) => {\r\n    dispatch({ type: GET_BLOG_REQUEST });\r\n\r\n    try {\r\n        const response = await api.get(`/api/admin/blog/page`, {\r\n            params: { page, size },\r\n            ...getAuthHeader(),\r\n        });\r\n\r\n        dispatch({\r\n            type: GET_BLOG_SUCCESS,\r\n            payload: response.data,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_BLOG_FAILURE,\r\n            payload: error.response?.data || 'Something went wrong',\r\n        });\r\n    }\r\n};\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,oBAAoB,EAAEC,oBAAoB,EAAEC,oBAAoB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,QAAQ,cAAc;AAElV,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACxB,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;EACzC,OAAO;IACHC,OAAO,EAAE;MACLC,aAAa,EAAE,UAAUJ,GAAG;IAChC;EACJ,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMK,WAAW,GAAIC,EAAE,IAAK,MAAOC,QAAQ,IAAK;EACnDA,QAAQ,CAAC;IAAEC,IAAI,EAAEjB;EAAiB,CAAC,CAAC;EACpC,IAAI;IACA,MAAMkB,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,GAAG,CAAC,mBAAmBJ,EAAE,EAAE,EAAEP,aAAa,CAAC,CAAC,CAAC;IACxEQ,QAAQ,CAAC;MAAEC,IAAI,EAAEhB,gBAAgB;MAAEmB,OAAO,EAAEF,QAAQ,CAACG;IAAK,CAAC,CAAC;EAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZN,QAAQ,CAAC;MAAEC,IAAI,EAAElB,gBAAgB;MAAEqB,OAAO,EAAEE,KAAK,CAACC;IAAQ,CAAC,CAAC;EAChE;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAIC,QAAQ,IAAK,MAAOT,QAAQ,IAAK;EACxDA,QAAQ,CAAC;IAAEC,IAAI,EAAEvB;EAAoB,CAAC,CAAC;EACvC,IAAI;IACA,MAAMwB,QAAQ,GAAG,MAAM1B,GAAG,CAACkC,IAAI,CAAC,iBAAiB,EAAED,QAAQ,EAAEjB,aAAa,CAAC,CAAC,CAAC;IAC7EQ,QAAQ,CAAC;MAAEC,IAAI,EAAEtB,mBAAmB;MAAEyB,OAAO,EAAEF,QAAQ,CAACG;IAAK,CAAC,CAAC;EACnE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZN,QAAQ,CAAC;MAAEC,IAAI,EAAExB,mBAAmB;MAAE2B,OAAO,EAAEE,KAAK,CAACC;IAAQ,CAAC,CAAC;EACnE;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAGA,CAACZ,EAAE,EAAEU,QAAQ,KAAK,MAAOT,QAAQ,IAAK;EAC5DA,QAAQ,CAAC;IAAEC,IAAI,EAAEX;EAAoB,CAAC,CAAC;EACvC,IAAI;IACA,MAAMY,QAAQ,GAAG,MAAM1B,GAAG,CAACoC,GAAG,CAAC,mBAAmBb,EAAE,EAAE,EAAEU,QAAQ,EAAEjB,aAAa,CAAC,CAAC,CAAC;IAClFQ,QAAQ,CAAC;MAAEC,IAAI,EAAEV,mBAAmB;MAAEa,OAAO,EAAEF,QAAQ,CAACG;IAAK,CAAC,CAAC;EACnE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZN,QAAQ,CAAC;MAAEC,IAAI,EAAEZ,mBAAmB;MAAEe,OAAO,EAAEE,KAAK,CAACC;IAAQ,CAAC,CAAC;EACnE;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,UAAU,GAAId,EAAE,IAAK,MAAOC,QAAQ,IAAK;EAClDA,QAAQ,CAAC;IAAEC,IAAI,EAAEpB;EAAoB,CAAC,CAAC;EACvC,IAAI;IACA,MAAML,GAAG,CAACsC,MAAM,CAAC,mBAAmBf,EAAE,EAAE,EAAEP,aAAa,CAAC,CAAC,CAAC;IAC1DQ,QAAQ,CAAC;MAAEC,IAAI,EAAEnB,mBAAmB;MAAEsB,OAAO,EAAEL;IAAG,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZN,QAAQ,CAAC;MAAEC,IAAI,EAAErB,mBAAmB;MAAEwB,OAAO,EAAEE,KAAK,CAACC;IAAQ,CAAC,CAAC;EACnE;AACJ,CAAC;;AAED;AACA,OAAO,MAAMQ,iBAAiB,GAAGA,CAACC,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,CAAC,KAAK,MAAOjB,QAAQ,IAAK;EACzEA,QAAQ,CAAC;IAAEC,IAAI,EAAEjB;EAAiB,CAAC,CAAC;EACpC,IAAI;IACA,MAAMkB,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,GAAG,CAAC,6BAA6Ba,IAAI,SAASC,IAAI,EAAE,EAAEzB,aAAa,CAAC,CAAC,CAAC;IACjGQ,QAAQ,CAAC;MAAEC,IAAI,EAAEhB,gBAAgB;MAAEmB,OAAO,EAAEF,QAAQ,CAACG;IAAK,CAAC,CAAC;EAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZN,QAAQ,CAAC;MAAEC,IAAI,EAAElB,gBAAgB;MAAEqB,OAAO,EAAEE,KAAK,CAACC;IAAQ,CAAC,CAAC;EAChE;AACJ,CAAC;AAED,OAAO,MAAMW,YAAY,GAAGA,CAAA,KAAM,MAAOlB,QAAQ,IAAK;EAClDA,QAAQ,CAAC;IAAEC,IAAI,EAAEd;EAAqB,CAAC,CAAC;EACxC,IAAI;IACA,MAAMe,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,GAAG,CAAC,kBAAkB,CAAC;IAClDH,QAAQ,CAAC;MAAEC,IAAI,EAAEb,oBAAoB;MAAEgB,OAAO,EAAEF,QAAQ,CAACG;IAAK,CAAC,CAAC;EACpE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZN,QAAQ,CAAC;MAAEC,IAAI,EAAEf,oBAAoB;MAAEkB,OAAO,EAAEE,KAAK,CAACC;IAAQ,CAAC,CAAC;EACpE;AACJ,CAAC;;AAED;AACA,OAAO,MAAMY,UAAU,GAAGA,CAACH,IAAI,GAAG,CAAC,EAAEC,IAAI,GAAG,CAAC,KAAK,MAAOjB,QAAQ,IAAK;EAClEA,QAAQ,CAAC;IAAEC,IAAI,EAAEjB;EAAiB,CAAC,CAAC;EAEpC,IAAI;IACA,MAAMkB,QAAQ,GAAG,MAAM1B,GAAG,CAAC2B,GAAG,CAAC,sBAAsB,EAAE;MACnDiB,MAAM,EAAE;QAAEJ,IAAI;QAAEC;MAAK,CAAC;MACtB,GAAGzB,aAAa,CAAC;IACrB,CAAC,CAAC;IAEFQ,QAAQ,CAAC;MACLC,IAAI,EAAEhB,gBAAgB;MACtBmB,OAAO,EAAEF,QAAQ,CAACG;IACtB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAe,eAAA;IACZrB,QAAQ,CAAC;MACLC,IAAI,EAAElB,gBAAgB;MACtBqB,OAAO,EAAE,EAAAiB,eAAA,GAAAf,KAAK,CAACJ,QAAQ,cAAAmB,eAAA,uBAAdA,eAAA,CAAgBhB,IAAI,KAAI;IACrC,CAAC,CAAC;EACN;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}